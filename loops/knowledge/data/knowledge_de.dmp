type(u'competence', u'Qualifikation', viewName=u'', 
    typeInterface=u'loops.knowledge.qualification.interfaces.ICompetence', 
    options=u'action.portlet:create_subtype,edit_concept')
type(u'person', u'Person', viewName=u'', 
    typeInterface=u'loops.knowledge.interfaces.IPerson', 
    options=u'action.portlet:createQualification,editPerson')
type(u'report', u'Report', viewName=u'', 
    typeInterface='loops.expert.report.IReport')
type(u'task', u'Aufgabe', viewName=u'', 
    typeInterface=u'loops.knowledge.interfaces.ITask', 
    options=u'action.portlet:createTask,editTask')
type(u'topic', u'Thema', viewName=u'', 
    typeInterface=u'loops.knowledge.interfaces.ITopic', 
    options=u'action.portlet:createTask,createTopic,editTopic')
#type(u'training', u'Schulung', viewName=u'', 
#    typeInterface=u'loops.organize.interfaces.ITask', 
#    options=u'action.portlet:edit_concept')

concept(u'general', u'Allgemein', u'domain')
concept(u'system', u'System', u'domain')

# predicates
concept(u'depends', u'depends', u'predicate')
concept(u'knows', u'knows', u'predicate')
concept(u'provides', u'provides', u'predicate')
concept(u'requires', u'requires', u'predicate')

concept(u'issubtype', u'is Subtype', u'predicate', options=u'hide_children',
    predicateInterface='loops.interfaces.IIsSubtype')

# reports
concept(u'qualification_overview', u'Qualification Overview', u'report',
    reportType=u'qualification_overview')

# structure
child(u'general', u'competence', u'standard')
child(u'general', u'depends', u'standard')
child(u'general', u'knows', u'standard')
child(u'general', u'person', u'standard')
child(u'general', u'provides', u'standard')
child(u'general', u'requires', u'standard')
child(u'general', u'task', u'standard')
child(u'general', u'topic', u'standard')
#child(u'general', u'training', u'standard')

child(u'system', u'issubtype', u'standard')
child(u'system', u'report', u'standard')

child(u'competence', u'competence', u'issubtype')
#child(u'competence', u'training', u'issubtype', usePredicate=u'provides')

# records
#records(u'qualification', u'loops.knowledge.qualification.base.QualificationRecord')
